#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3623
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace lab12
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="AdventureWorks2008")]
	public partial class EmployeeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertEmployeeDepartmentHistory(EmployeeDepartmentHistory instance);
    partial void UpdateEmployeeDepartmentHistory(EmployeeDepartmentHistory instance);
    partial void DeleteEmployeeDepartmentHistory(EmployeeDepartmentHistory instance);
    partial void InsertSalesPerson(SalesPerson instance);
    partial void UpdateSalesPerson(SalesPerson instance);
    partial void DeleteSalesPerson(SalesPerson instance);
    #endregion
		
		public EmployeeDataContext() : 
				base(global::lab12.Properties.Settings.Default.AdventureWorks2008ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EmployeeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EmployeeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EmployeeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EmployeeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeDepartmentHistory> EmployeeDepartmentHistories
		{
			get
			{
				return this.GetTable<EmployeeDepartmentHistory>();
			}
		}
		
		public System.Data.Linq.Table<SalesPerson> SalesPersons
		{
			get
			{
				return this.GetTable<SalesPerson>();
			}
		}
		
		public System.Data.Linq.Table<lab12View> lab12Views
		{
			get
			{
				return this.GetTable<lab12View>();
			}
		}
	}
	
	[Table(Name="HumanResources.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _DepartmentID;
		
		private string _Name;
		
		private string _GroupName;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<EmployeeDepartmentHistory> _EmployeeDepartmentHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(short value);
    partial void OnDepartmentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Department()
		{
			this._EmployeeDepartmentHistories = new EntitySet<EmployeeDepartmentHistory>(new Action<EmployeeDepartmentHistory>(this.attach_EmployeeDepartmentHistories), new Action<EmployeeDepartmentHistory>(this.detach_EmployeeDepartmentHistories));
			OnCreated();
		}
		
		[Column(Storage="_DepartmentID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_GroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="Department_EmployeeDepartmentHistory", Storage="_EmployeeDepartmentHistories", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<EmployeeDepartmentHistory> EmployeeDepartmentHistories
		{
			get
			{
				return this._EmployeeDepartmentHistories;
			}
			set
			{
				this._EmployeeDepartmentHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeDepartmentHistories(EmployeeDepartmentHistory entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_EmployeeDepartmentHistories(EmployeeDepartmentHistory entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[Table(Name="HumanResources.EmployeeDepartmentHistory")]
	public partial class EmployeeDepartmentHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessEntityID;
		
		private short _DepartmentID;
		
		private byte _ShiftID;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessEntityIDChanging(int value);
    partial void OnBusinessEntityIDChanged();
    partial void OnDepartmentIDChanging(short value);
    partial void OnDepartmentIDChanged();
    partial void OnShiftIDChanging(byte value);
    partial void OnShiftIDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public EmployeeDepartmentHistory()
		{
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[Column(Storage="_BusinessEntityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BusinessEntityID
		{
			get
			{
				return this._BusinessEntityID;
			}
			set
			{
				if ((this._BusinessEntityID != value))
				{
					this.OnBusinessEntityIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessEntityID = value;
					this.SendPropertyChanged("BusinessEntityID");
					this.OnBusinessEntityIDChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShiftID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ShiftID
		{
			get
			{
				return this._ShiftID;
			}
			set
			{
				if ((this._ShiftID != value))
				{
					this.OnShiftIDChanging(value);
					this.SendPropertyChanging();
					this._ShiftID = value;
					this.SendPropertyChanged("ShiftID");
					this.OnShiftIDChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="Department_EmployeeDepartmentHistory", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.EmployeeDepartmentHistories.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.EmployeeDepartmentHistories.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(short);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Sales.SalesPerson")]
	public partial class SalesPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessEntityID;
		
		private System.Nullable<int> _TerritoryID;
		
		private System.Nullable<decimal> _SalesQuota;
		
		private decimal _Bonus;
		
		private decimal _CommissionPct;
		
		private decimal _SalesYTD;
		
		private decimal _SalesLastYear;
		
		private System.Guid _rowguid;
		
		private System.DateTime _ModifiedDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessEntityIDChanging(int value);
    partial void OnBusinessEntityIDChanged();
    partial void OnTerritoryIDChanging(System.Nullable<int> value);
    partial void OnTerritoryIDChanged();
    partial void OnSalesQuotaChanging(System.Nullable<decimal> value);
    partial void OnSalesQuotaChanged();
    partial void OnBonusChanging(decimal value);
    partial void OnBonusChanged();
    partial void OnCommissionPctChanging(decimal value);
    partial void OnCommissionPctChanged();
    partial void OnSalesYTDChanging(decimal value);
    partial void OnSalesYTDChanged();
    partial void OnSalesLastYearChanging(decimal value);
    partial void OnSalesLastYearChanged();
    partial void OnrowguidChanging(System.Guid value);
    partial void OnrowguidChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public SalesPerson()
		{
			OnCreated();
		}
		
		[Column(Storage="_BusinessEntityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BusinessEntityID
		{
			get
			{
				return this._BusinessEntityID;
			}
			set
			{
				if ((this._BusinessEntityID != value))
				{
					this.OnBusinessEntityIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessEntityID = value;
					this.SendPropertyChanged("BusinessEntityID");
					this.OnBusinessEntityIDChanged();
				}
			}
		}
		
		[Column(Storage="_TerritoryID", DbType="Int")]
		public System.Nullable<int> TerritoryID
		{
			get
			{
				return this._TerritoryID;
			}
			set
			{
				if ((this._TerritoryID != value))
				{
					this.OnTerritoryIDChanging(value);
					this.SendPropertyChanging();
					this._TerritoryID = value;
					this.SendPropertyChanged("TerritoryID");
					this.OnTerritoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_SalesQuota", DbType="Money")]
		public System.Nullable<decimal> SalesQuota
		{
			get
			{
				return this._SalesQuota;
			}
			set
			{
				if ((this._SalesQuota != value))
				{
					this.OnSalesQuotaChanging(value);
					this.SendPropertyChanging();
					this._SalesQuota = value;
					this.SendPropertyChanged("SalesQuota");
					this.OnSalesQuotaChanged();
				}
			}
		}
		
		[Column(Storage="_Bonus", DbType="Money NOT NULL")]
		public decimal Bonus
		{
			get
			{
				return this._Bonus;
			}
			set
			{
				if ((this._Bonus != value))
				{
					this.OnBonusChanging(value);
					this.SendPropertyChanging();
					this._Bonus = value;
					this.SendPropertyChanged("Bonus");
					this.OnBonusChanged();
				}
			}
		}
		
		[Column(Storage="_CommissionPct", DbType="SmallMoney NOT NULL")]
		public decimal CommissionPct
		{
			get
			{
				return this._CommissionPct;
			}
			set
			{
				if ((this._CommissionPct != value))
				{
					this.OnCommissionPctChanging(value);
					this.SendPropertyChanging();
					this._CommissionPct = value;
					this.SendPropertyChanged("CommissionPct");
					this.OnCommissionPctChanged();
				}
			}
		}
		
		[Column(Storage="_SalesYTD", DbType="Money NOT NULL")]
		public decimal SalesYTD
		{
			get
			{
				return this._SalesYTD;
			}
			set
			{
				if ((this._SalesYTD != value))
				{
					this.OnSalesYTDChanging(value);
					this.SendPropertyChanging();
					this._SalesYTD = value;
					this.SendPropertyChanged("SalesYTD");
					this.OnSalesYTDChanged();
				}
			}
		}
		
		[Column(Storage="_SalesLastYear", DbType="Money NOT NULL")]
		public decimal SalesLastYear
		{
			get
			{
				return this._SalesLastYear;
			}
			set
			{
				if ((this._SalesLastYear != value))
				{
					this.OnSalesLastYearChanging(value);
					this.SendPropertyChanging();
					this._SalesLastYear = value;
					this.SendPropertyChanged("SalesLastYear");
					this.OnSalesLastYearChanged();
				}
			}
		}
		
		[Column(Storage="_rowguid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid rowguid
		{
			get
			{
				return this._rowguid;
			}
			set
			{
				if ((this._rowguid != value))
				{
					this.OnrowguidChanging(value);
					this.SendPropertyChanging();
					this._rowguid = value;
					this.SendPropertyChanged("rowguid");
					this.OnrowguidChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.lab12View")]
	public partial class lab12View
	{
		
		private string _Name;
		
		private string _DeparmentName;
		
		private string _EmailAddress;
		
		private string _AddressLine1;
		
		private int _BusinessEntityID;
		
		private System.Nullable<decimal> _Rate;
		
		public lab12View()
		{
		}
		
		[Column(Storage="_Name", DbType="NVarChar(101) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_DeparmentName", DbType="NVarChar(50)")]
		public string DeparmentName
		{
			get
			{
				return this._DeparmentName;
			}
			set
			{
				if ((this._DeparmentName != value))
				{
					this._DeparmentName = value;
				}
			}
		}
		
		[Column(Storage="_EmailAddress", DbType="NVarChar(50)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this._EmailAddress = value;
				}
			}
		}
		
		[Column(Storage="_AddressLine1", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string AddressLine1
		{
			get
			{
				return this._AddressLine1;
			}
			set
			{
				if ((this._AddressLine1 != value))
				{
					this._AddressLine1 = value;
				}
			}
		}
		
		[Column(Storage="_BusinessEntityID", DbType="Int NOT NULL")]
		public int BusinessEntityID
		{
			get
			{
				return this._BusinessEntityID;
			}
			set
			{
				if ((this._BusinessEntityID != value))
				{
					this._BusinessEntityID = value;
				}
			}
		}
		
		[Column(Storage="_Rate", DbType="Money")]
		public System.Nullable<decimal> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this._Rate = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
